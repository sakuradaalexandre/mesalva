<?php

class BancoDao extends Model {

    public $sql;

    public function __construct () {}

    public function exec($dbh, $class, $options = null)
    {
        return parent::exec($dbh, $class, $options); // TODO: Change the autogenerated stub
    }

    public function all($table)
    {
        return parent::all($table); // TODO: Change the autogenerated stub
    }

    public function where($options)
    {
        return parent::where($options); // TODO: Change the autogenerated stub
    }

    public function order($options)
    {
        return parent::order($options); // TODO: Change the autogenerated stub
    }

    public function find($column, $value, $operator = '=')
    {
        return parent::find($column, $value, $operator); // TODO: Change the autogenerated stub
    }

    public function update($table, $table_columns, $key)
    {
        return parent::update($table, $table_columns, $key); // TODO: Change the autogenerated stub
    }

    public function create($table, $table_columns)
    {
        return parent::create($table, $table_columns); // TODO: Change the autogenerated stub
    }

    public function first()
    {
        return parent::first(); // TODO: Change the autogenerated stub
    }

    public function select($table, $columns)
    {
        return parent::select($table, $columns); // TODO: Change the autogenerated stub
    }

    public function custom($sql)
    {
        return parent::custom($sql); // TODO: Change the autogenerated stub
    }

    public function leftJoin($table1, $table2, $key1, $key2)
    {
        return parent::leftJoin($table1, $table2, $key1, $key2); // TODO: Change the autogenerated stub
    }

    public function rightJoin($table1, $table2, $key1, $key2)
    {
        return parent::rightJoin($table1, $table2, $key1, $key2); // TODO: Change the autogenerated stub
    }

    public function innerJoin($table1, $table2, $key1, $key2)
    {
        return parent::innerJoin($table1, $table2, $key1, $key2); // TODO: Change the autogenerated stub
    }

    public function join($table1, $table2, $key1, $key2)
    {
        return parent::join($table1, $table2, $key1, $key2); // TODO: Change the autogenerated stub
    }

    public function execwoclass($dbh, $options = [])
    {
        return parent::execwoclass($dbh, $options); // TODO: Change the autogenerated stub
    }

    public function group($column)
    {
        return parent::group($column); // TODO: Change the autogenerated stub
    }


    public function optionsObject($object, $key = null) {

        $array = [

            ':rg'                       => $object->rg,
            ':cpf'                      => $object->cpf,
            ':data_de_criacao'          => $object->data_de_criacao,
            ':email'                    => $object->email,
            ':endereco'                 => $object->endereco,
            ':estadocivil'              => $object->estadocivil,
            ':fone'                     => (int) $object->fone,
            ':fone2'                    => (int) $object->fone2,
            ':nacionalidade'            => $object->nacionalidade,
            ':nomecompleto'             => $object->nomecompleto,
            ':profissao'                => $object->profissao,
            ':data_de_modificacao'      => $object->data_de_modificacao

        ];

        if ($key == null) {
            $array += [':id' => $object->id];
        }

        return $array;

    }

    public function save($dbh, $table, $class, $object) {

        if ($object->id == NULL) {
            
            return $this->create($table, $object->getTableColumns())->exec($dbh, $class, $this->optionsObject($object));
        } else {
            return $this->update($table, $object->getTableColumns(), 'id')->where('id = '.$object->id)->exec($dbh, $class, $this->optionsObject($object, 1));
        }

    }
    
    public function trataNumero($numero) {
        
        $numero = preg_replace("/\./", '', $numero);
        $numero = preg_replace("/\-/", '', $numero);
        $numero = preg_replace("/\ /", '', $numero);
        $numero = preg_replace("/\(/", '', $numero);
        $numero = preg_replace("/\)/", '', $numero);
        
        
        
        return (int) $numero;
        
    }

    public function setCreateColumns($dbh, $table, $class, $id, $request) {

        date_default_timezone_set('America/Campo_Grande');

        if ($id == null) {
            $usuario = new Cliente();
            $usuario->cpf                       = $this->trataNumero($request['cpf']);
            $usuario->fone                      = $this->trataNumero($request['fone']);
            $usuario->fone2                     = $request['fone2'] != '' ? $this->trataNumero($request['fone2']) :  $request['fone2'];
            $usuario->nacionalidade             = $request['nacionalidade']   == "false" ? 'Brasileiro' : $request['outro_nacionalidade'];
            $usuario->profissao                 = $request['profissao']       == "false" ? 'Estudante'  : $request['outro_profissao'];
            $usuario->data_de_criacao = date('Y-m-d H:i:s');
            $usuario->rg                        = $request['rg'];
            $usuario->email                     = $request['email'];
            $usuario->endereco                  = $request['endereco'];
            $usuario->nomecompleto              = $request['nomecompleto'];
            $usuario->estadocivil               = $request['estadocivil'] == "true"  ? 'Casado'     : 'Solteiro';

        } 

        return $usuario;

    }
    
    public function setUpdateColumns($dbh, $table, $class, $id, $request) {

        date_default_timezone_set('America/Campo_Grande');

        if ($id != null) {
            $usuario = $this->all($table)->find('id', $id)->first()->exec($dbh, $class);
            $usuario->data_de_modificacao       = date('Y-m-d H:i:s');
            $usuario->cpf                       = $request['cpf'];
            $usuario->fone                      = $request['fone'];
            $usuario->fone2                     = $request['fone2'] != '' ? $request['fone2'] :  0;
            $usuario->nacionalidade             = $request['nacionalidade'];
            $usuario->profissao                 = $request['profissao'];
            $usuario->rg                        = $request['rg'];
            $usuario->email                     = $request['email'];
            $usuario->endereco                  = $request['endereco'];
            $usuario->nomecompleto              = $request['nomecompleto'];
            $usuario->estadocivil               = $request['estadocivil'] == "true"  ? 'Casado'     : 'Solteiro';

        }

        return $usuario;

    }

    public function delete($table, $key, $id)
    {
        return parent::delete($table, $key, $id); // TODO: Change the autogenerated stub
    }

    public function joinwopktable($table1, $table2, $key1, $key2)
    {
        return parent::joinwopktable($table1, $table2, $key1, $key2); // TODO: Change the autogenerated stub
    }

    public function to_object(array $array, $class = 'stdClass')
    {
        return parent::to_object($array, $class); // TODO: Change the autogenerated stub
    }

    public function createiatable($table, $table_columns)
    {
        return parent::createiatable($table, $table_columns); // TODO: Change the autogenerated stub
    }
    
    public function getLastInsertedId($dbh) {
        return parent::getLastInsertedId($dbh);
    }


}